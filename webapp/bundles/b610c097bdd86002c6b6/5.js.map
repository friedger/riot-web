{"version":3,"sources":["src/rageshake/submit-rageshake.js"],"names":["__webpack_require__","_languageHandler","TextEncodingUtf8","TextEncoder","window","_submitReport","endpoint","body","progressCallback","deferred","Promise","defer","req","XMLHttpRequest","open","timeout","onreadystatechange","readyState","LOADING","_t","DONE","status","reject","Error","resolve","on_done","send","promise","_callee","bugReportEndpoint","opts","version","userAgent","client","logs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","entry","buf","compressed","_regenerator2","default","wrap","_context","prev","next","_bluebird","PlatformPeg","get","getAppVersion","sent","t0","navigator","MatrixClientPeg","console","log","FormData","append","userText","credentials","userId","deviceId","sendLogs","rageshake","getLogsForReport","undefined","_getIterator3","done","value","encode","lines","pako","gzip","Blob","id","t1","return","finish","stop","this"],"mappings":"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","file":"bundles/b610c097bdd86002c6b6/5.js","sourcesContent":["/*\nCopyright 2017 OpenMarket Ltd\nCopyright 2018 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport pako from 'pako';\nimport Promise from 'bluebird';\n\nimport MatrixClientPeg from '../MatrixClientPeg';\nimport PlatformPeg from '../PlatformPeg';\nimport { _t } from '../languageHandler';\n\nimport rageshake from './rageshake';\n\n\n// polyfill textencoder if necessary\nimport * as TextEncodingUtf8 from 'text-encoding-utf-8';\nlet TextEncoder = window.TextEncoder;\nif (!TextEncoder) {\n    TextEncoder = TextEncodingUtf8.TextEncoder;\n}\n\n/**\n * Send a bug report.\n *\n * @param {string} bugReportEndpoint HTTP url to send the report to\n *\n * @param {object} opts optional dictionary of options\n *\n * @param {string} opts.userText Any additional user input.\n *\n * @param {boolean} opts.sendLogs True to send logs\n *\n * @param {function(string)} opts.progressCallback Callback to call with progress updates\n *\n * @return {Promise} Resolved when the bug report is sent.\n */\nexport default async function sendBugReport(bugReportEndpoint, opts) {\n    if (!bugReportEndpoint) {\n        throw new Error(\"No bug report endpoint has been set.\");\n    }\n\n    opts = opts || {};\n    const progressCallback = opts.progressCallback || (() => {});\n\n    progressCallback(_t(\"Collecting app version information\"));\n    let version = \"UNKNOWN\";\n    try {\n        version = await PlatformPeg.get().getAppVersion();\n    } catch (err) {} // PlatformPeg already logs this.\n\n    let userAgent = \"UNKNOWN\";\n    if (window.navigator && window.navigator.userAgent) {\n        userAgent = window.navigator.userAgent;\n    }\n\n    const client = MatrixClientPeg.get();\n\n    console.log(\"Sending bug report.\");\n\n    const body = new FormData();\n    body.append('text', opts.userText || \"User did not supply any additional text.\");\n    body.append('app', 'riot-web');\n    body.append('version', version);\n    body.append('user_agent', userAgent);\n\n    if (client) {\n        body.append('user_id', client.credentials.userId);\n        body.append('device_id', client.deviceId);\n    }\n\n    if (opts.sendLogs) {\n        progressCallback(_t(\"Collecting logs\"));\n        const logs = await rageshake.getLogsForReport();\n        for (const entry of logs) {\n            // encode as UTF-8\n            const buf = new TextEncoder().encode(entry.lines);\n\n            // compress\n            const compressed = pako.gzip(buf);\n\n            body.append('compressed-log', new Blob([compressed]), entry.id);\n        }\n    }\n\n    progressCallback(_t(\"Uploading report\"));\n    await _submitReport(bugReportEndpoint, body, progressCallback);\n}\n\nfunction _submitReport(endpoint, body, progressCallback) {\n    const deferred = Promise.defer();\n\n    const req = new XMLHttpRequest();\n    req.open(\"POST\", endpoint);\n    req.timeout = 5 * 60 * 1000;\n    req.onreadystatechange = function() {\n        if (req.readyState === XMLHttpRequest.LOADING) {\n            progressCallback(_t(\"Waiting for response from server\"));\n        } else if (req.readyState === XMLHttpRequest.DONE) {\n            on_done();\n        }\n    };\n    req.send(body);\n    return deferred.promise;\n\n    function on_done() {\n        if (req.status < 200 || req.status >= 400) {\n            deferred.reject(new Error(`HTTP ${req.status}`));\n            return;\n        }\n        deferred.resolve();\n    }\n}\n"],"sourceRoot":""}